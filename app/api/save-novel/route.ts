import { NextRequest, NextResponse } from 'next/server'
import { createNovel, updateNovel, createImportTask } from '@/lib/db'

export async function POST(request: NextRequest) {
  try {
    const novelData = await request.json()
    
    if (!novelData.title || !novelData.author) {
      return NextResponse.json({ error: '小说标题和作者不能为空' }, { status: 400 })
    }

    let novelId = novelData.existingNovelId
    let isUpdate = false
    
    if (novelId) {
      // 更新已存在的小说
      isUpdate = true
    } else {
      // 创建新小说
      novelId = crypto.randomUUID()
    }
    
    let savedNovel
    if (isUpdate) {
      // 更新已存在的小说
      const novelToUpdate = {
        title: novelData.title,
        author: novelData.author,
        description: novelData.description || '',
        category: novelData.category || '其他',
        cover: novelData.cover || '',
        status: novelData.status || '连载中',
        lastUpdate: new Date().toISOString(),
        latestChapter: novelData.latestChapter || '',
        wordCount: novelData.wordCount || 0,
        source: novelData.source || '',
        createdAt: novelData.createdAt,
        updatedAt: new Date().toISOString()
      }
      savedNovel = await updateNovel(novelId, novelToUpdate)
    } else {
      // 创建新小说 - don't include id as createNovel generates its own
      const novelToCreate = {
        title: novelData.title,
        author: novelData.author,
        description: novelData.description || '',
        category: novelData.category || '其他',
        cover: novelData.cover || '',
        status: novelData.status || '连载中',
        lastUpdate: new Date().toISOString(),
        latestChapter: novelData.latestChapter || '',
        wordCount: novelData.wordCount || 0,
        source: novelData.source || ''
      }
      savedNovel = await createNovel(novelToCreate)
      // Update novelId with the one generated by createNovel
      novelId = savedNovel.id
    }

    if (!savedNovel || !savedNovel.id) {
      throw new Error('Failed to save novel data')
    }

    // 创建导入任务
    if (novelData.chapters && novelData.chapters.length > 0) {
      await createImportTask({
        novelId: savedNovel.id,
        taskType: isUpdate ? 'update' : 'import',
        status: 'pending',
        totalChapters: novelData.chapters.length,
        importedChapters: 0,
        failedChapters: 0,
        sourceUrl: novelData.source || '',
        indexPageHtml: novelData.indexPageHtml || ''
      })
    }

    return NextResponse.json({ 
      success: true, 
      novelId: savedNovel.id,
      isUpdate,
      message: isUpdate ? '小说信息更新成功' : '小说保存成功'
    })
  } catch (error) {
    console.error('Save novel error:', error)
    const errorMessage = error instanceof Error ? error.message : 'Unknown error'
    return NextResponse.json({ 
      error: `保存失败: ${errorMessage}` 
    }, { status: 500 })
  }
}
